name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Clean install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        if (Test-Path node_modules) { Remove-Item -Recurse -Force node_modules }
        if (Test-Path package-lock.json) { Remove-Item package-lock.json }
        npm install
        
    - name: Clean install dependencies (Unix)
      if: runner.os != 'Windows'
      run: |
        rm -rf node_modules package-lock.json || true
        npm install
      
    - name: Build minecraft-installer (Windows)
      if: runner.os == 'Windows'
      run: |
        cd tools/minecraft-installer
        cargo build --release
        
    - name: Build minecraft-installer (Unix)
      if: runner.os != 'Windows'
      run: |
        cd tools/minecraft-installer
        cargo build --release
        
    - name: Build web assets
      run: npm run build
      
    - name: Build distributables (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "=== Building Windows distributables ==="
        npx electron-builder --win --publish=never
        echo "=== Windows build completed ==="
        echo "=== Contents of dist ==="
        dir dist
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build distributables (macOS)
      if: runner.os == 'macOS'
      run: |
        echo "=== Building macOS distributables ==="
        npx electron-builder --mac --publish=never
        echo "=== macOS build completed ==="
        ls -la dist/
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build distributables (Linux)
      if: runner.os == 'Linux'
      run: |
        echo "=== Building Linux distributables ==="
        npx electron-builder --linux --publish=never
        echo "=== Linux build completed ==="
        ls -la dist/
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.os }}
        path: dist/
        
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
      
    - name: Extract version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
      
    - name: Generate release notes
      run: |
        # Define the changes for this version (customize per release)
        CHANGES="Cute Animated Cat During Updates,Integrated Cancel Confirmation UI,Proper Download Abortion with AbortController,Fixed Icon and Logo Display in Production,Improved Release Notes Parsing,Compact Modal with Scrollable Release Notes"
        
        # Check if release notes already exist (pre-generated)
        if [ -f "tools/github/releases/notes/RELEASE_NOTES_v${{ steps.get_version.outputs.version }}.md" ]; then
          echo "Using pre-generated release notes"
          cp tools/github/releases/notes/RELEASE_NOTES_v${{ steps.get_version.outputs.version }}.md ./release_notes.md
        else
          echo "Generating release notes with script"
          node tools/github/releases/generate-release-notes.cjs "${{ steps.get_version.outputs.version }}" "$CHANGES"
          cp tools/github/releases/notes/RELEASE_NOTES_v${{ steps.get_version.outputs.version }}.md ./release_notes.md
        fi
        
        echo "Release notes ready:"
        cat ./release_notes.md
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: List downloaded files
      run: |
        echo "=== Listing all downloaded files ==="
        find . -name "dist-*" -type d | head -10
        echo "=== Files in dist directories ==="
        find . -path "*/dist-*" -type f | head -20
        echo "=== All executable files ==="
        find . -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.zip" -o -name "*.blockmap" | head -20
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist-*/*.exe
          dist-*/*.dmg
          dist-*/*.AppImage
          dist-*/*.deb
          dist-*/*.rpm
          dist-*/*.zip
          dist-*/*.blockmap
        body_path: ./release_notes.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
