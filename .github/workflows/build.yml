name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build minecraft-installer (Windows)
      if: runner.os == 'Windows'
      run: |
        cd tools/minecraft-installer
        cargo build --release
        
    - name: Build minecraft-installer (Unix)
      if: runner.os != 'Windows'
      run: |
        cd tools/minecraft-installer
        cargo build --release
        
    - name: Build Electron app
      run: npm run build
      
    - name: Build distributables (Windows)
      if: runner.os == 'Windows'
      run: npm run dist
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build distributables (Unix)
      if: runner.os != 'Windows'
      run: npx electron-builder
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.os }}
        path: dist/
        
  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist-windows/**/*
          dist-macos/**/*
          dist-ubuntu/**/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
